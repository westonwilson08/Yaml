AWSTemplateFormatVersion: 2010-09-09
Description: |
  Template to create global infosec audit tools in every child account of a multi-account AWS environment
# 2018-01-01 :: Security Group Remediation setup
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Settings
        Parameters:
          - NotificationEmailAddress
          - AccountPrefix
    ParameterLabels:
      NotificationEmailAddress:
        default: Send notifications to
Parameters:
  NotificationEmailAddress:
    Description: |
      This is the email address that will receive change notifications. You will
      receive a confirmation email that you must accept before you will receive
      notifications.
    Type: String
    Default: 'name@email.com'
  AccountPrefix:
    Type: String
    Description: Account prefix, e.g. Tools-np, Dev
    Default: 'account***'
Conditions:
  AddEmailNotificationSubscription: !Not
    - !Equals
      - !Ref NotificationEmailAddress
      - ''
Resources:
#
# IAM
#
  ITSecAuditRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: svc_itsec-audit
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: itsecaudit
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowSecurityGroupActions
                Effect: Allow
                Action:
                  - 'ec2:RevokeSecurityGroupIngress'
                Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*'
              - Sid: AllowSnsActions
                Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                - !Ref SnsTopicForCloudWatchEvent
                - !Sub 'arn:aws:sns:us-east-1:${AWS::AccountId}:itsec-default-deny-topic'
              - Sid: AuditActions
                Effect: Allow
                Action:
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSecurityGroupReferences'
                  - 'ec2:DescribeStaleSecurityGroups'
                  - 'ec2:DescribeVpcs'
                  - 'organizations:DescribeAccount'
                  - 'iam:*'
                  - 'logs:*'
                Resource: '*'
#
# Lambda
#
  SGRemediateLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: itsec-sgremediate
      Description: Responds to security group changes
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt ITSecAuditRole.Arn
      Runtime: python2.7
      Timeout: 60
      Environment:
        Variables:
          sns_topic_arn: !Ref SnsTopicForCloudWatchEvent
          admin_role: !Sub '${AccountPrefix}_Admin'
      Code:
        ZipFile: |
          import os, json, boto3, re

          def lambda_handler(event, context):
              det = event['detail']
              user_id=det['userIdentity']
              remediated = True
              #Event missing info
              if 'detail' not in event or ('detail' in event and 'eventName' not in det):
                  return {"Result": "Failure", "Message": "Lambda not triggered by an event"}
              #approved SG change users
              appr_user = [os.environ['admin_role'].lower(), "awscloudformationstacksetexecutionrole"]
              if user_id['type'] == 'IAMUser':
                  user = user_id['userName']
                  email_regex = re.compile("@.*")
                  user = email_regex.sub("", user)
              if user_id['type'] == 'AssumedRole':
                  user = user_id['sessionContext']['sessionIssuer']['userName']
              acct_name = boto3.client('iam').list_account_aliases()
              if (user.lower() not in appr_user):
                  res = revoke_sg_in(det)
                  sg = str(res['group_id'])
                  ec2 = boto3.client('ec2')
                  sgroups = ec2.describe_security_groups(GroupIds = [sg])
                  sgname= sgroups['SecurityGroups'][0]['GroupName']
                  ip_perms = json.dumps(det['requestParameters']['ipPermissions'], indent=4, separators=(',', ': '))
                  if remediated == True:
                      message = "Auto-Removed: Ingress rule removed from security group: "+sg+" \n\nAdded by: "+user+ " \n\nAccount: "+str(acct_name['AccountAliases'])+" \n\nSecurity Group: "+ sgname + " \n"+ip_perms
                      print("REMOVING RULE from "+sgname)
                      boto3.client('sns').publish(
                          TargetArn = os.environ['sns_topic_arn'],
                          Message = message,
                          Subject = "Security Group mitigation"
                          )
                  else:
                      message = "Could not remove the security group rule from Account: "+str(acct_name['AccountAliases'])+" \n\n"+sgname+"/"+ sg + ":\n" + json.dumps(ip_perms)
                      boto3.client('sns').publish(
                          TargetArn = os.environ['sns_topic_arn'],
                          Message = message,
                          Subject = "Security Group mitigation"
                          )
              else:
                  print("The event was triggered by an authorized user")

          def revoke_sg_in(det):
              ip_perms = normalize_parm_names(det['requestParameters']['ipPermissions']['items'])
              try:
                  response = boto3.client('ec2').revoke_security_group_ingress(
                      GroupId = det['requestParameters']['groupId'],
                      IpPermissions = ip_perms
                      )
                  remediated = True
              except Exception as e:
                  remediated = False
                  print("Remediation unsuccessful: "+str(e))
              res = {}
              res['group_id'] = det['requestParameters']['groupId']
              res['user_name'] = det['userIdentity']['arn']
              res['ip_permissions'] = ip_perms
              return res

          def normalize_parm_names(ip_items):
              new_ip_items = []
              for ip_item in ip_items:
                  new_ip_item = {
                      "IpProtocol": ip_item['ipProtocol'],
                      "FromPort": ip_item['fromPort'],
                      "ToPort": ip_item['toPort']
                  }
                  if 'ipv6Ranges' in ip_item and ip_item['ipv6Ranges']:
                      ip_ranges = []
                      ipv_range_name = 'ipv6Ranges'
                      ipv_address_value = 'cidrIpv6'
                      ipv_range_name_cap = 'Ipv6Ranges'
                      ipv_addr_val_cap = 'CidrIpv6'
                      for item in ip_item[ipv_range_name]['items']:
                          ip_ranges.append(
                              {ipv_addr_val_cap : item[ipv_address_value]}
                              )
                      new_ip_item[ipv_range_name_cap] = ip_ranges
                      new_ip_item[ipv_range_name_cap] = ip_ranges
                  if 'ipRanges' in ip_item and ip_item['ipRanges']:
                      ip_ranges = []
                      ipv_range_name = 'ipRanges'
                      ipv_address_value = 'cidrIp'
                      ipv_range_name_cap = 'IpRanges'
                      ipv_addr_val_cap = 'CidrIp'
                      for item in ip_item[ipv_range_name]['items']:
                          ip_ranges.append(
                              {ipv_addr_val_cap : item[ipv_address_value]}
                              )
                      new_ip_items.append(new_ip_item)
                      new_ip_item[ipv_range_name_cap] = ip_ranges
              return new_ip_items
  SGRemediateLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      FunctionName: !Ref SGRemediateLambda
  SGRemediateTriggeredRule:
    Type: AWS::Events::Rule
    Properties:
      Name: itsec-sgremediate-trigger
      Description: Responds to security group change events
      EventPattern:
        detail:
          eventSource:
            - ec2.amazonaws.com
          eventName:
            - AuthorizeSecurityGroupIngress
      State: ENABLED
      Targets:
        - Arn: !GetAtt SGRemediateLambda.Arn
          Id: TargetFunctionV1
  SnsTopicForCloudWatchEvent:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: AWS Alert
  SnsTopicSubscriptionForCloudWatchEvent:
    Type: AWS::SNS::Subscription
    Condition: AddEmailNotificationSubscription
    Properties:
      TopicArn: !Ref SnsTopicForCloudWatchEvent
      Endpoint: !Ref NotificationEmailAddress
      Protocol: email
